const constants = require('~/node/constants');

const ALLOWED_CHROME_PERMISSIONS = [
    'activeTab', 
    'alarms', 
    'background', 
    'bookmarks', 
    'browsingData', 
    'certificateProvider', 
    'clipboardRead', 
    'clipboardWrite', 
    'contentSettings', 
    'contextMenus', 
    'cookies', 
    'debugger', 
    'declarativeContent', 
    'declarativeNetRequest', 
    'declarativeNetRequestFeedback', 
    'declarativeWebRequest', 
    'desktopCapture', 
    'documentScan', 
    'downloads', 
    'enterprise.deviceAttributes', 
    'enterprise.hardwarePlatform', 
    'enterprise.networkingAttributes', 
    'enterprise.platformKeys', 
    'experimental', 
    'fileBrowserHandler', 
    'fileSystemProvider', 
    'fontSettings', 
    'gcm', 
    'geolocation', 
    'history', 
    'identity', 
    'identity.email', 
    'idle', 
    'loginState', 
    'management', 
    'nativeMessaging', 
    'notifications', 
    'pageCapture', 
    'platformKeys', 
    'power', 
    'printerProvider', 
    'printing', 
    'printingMetrics', 
    'privacy', 
    'processes', 
    'proxy', 
    'scripting', 
    'search', 
    'sessions', 
    'signedInDevices', 
    'storage', 
    'system.cpu', 
    'system.display', 
    'system.memory', 
    'system.storage', 
    'tabCapture', 
    'tabGroups', 
    'tabs', 
    'topSites', 
    'tts', 
    'ttsEngine', 
    'unlimitedStorage', 
    'vpnProvider', 
    'wallpaper', 
    'webNavigation', 
    'webRequest', 
    'webRequestBlocking',
];

module.exports = [
    {
        keyword: 'chrome_permission',
        validate: (...[, input]) => typeof input === 'string'
            && ALLOWED_CHROME_PERMISSIONS.includes(input),
        error: {
            message: (cxt) => cxt.data,
        },
    },
    {
        keyword: 'layer',
        validate: (...[, input]) => typeof input === 'string'
            && constants.LAYERS.includes(input),
        error: {
            message: (cxt) => cxt.data,
        },
    },
    {
        keyword: 'build',
        validate: (...[, input]) => typeof input === 'string'
            && constants.SELECTIVE_BUILDS.includes(input),
        error: {
            message: (cxt) => cxt.data,
        },
    },
];
